<?xml version="1.0" encoding="UTF-8"?>
<project name="lab3" default="compile" basedir=".">
    <property file="build.properties"/>

    <!-- Загрузка библиотеки ant-contrib -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="C:\Users\Михаил\Documents\IT\javaProjects\opi-lab3\lib\ant-contrib-20020829.jar"/>
        </classpath>
    </taskdef>

    <path id="classpath">
        <fileset dir="C:\Program Files\apache-ant-1.10.14\lib" includes="**/*.jar"/>
        <pathelement location="C:\Program Files\apache-ant-1.10.14\lib\ant-junit.jar"/>
    </path>

    <target name="compile">
        <echo message="--- COMPILE START ---"/>
        <mkdir dir="${compiled.classes}"/>
        <javac destdir="${compiled.classes}" includeantruntime="false">
            <src path="${main.dir}"/>
            <classpath>
                <pathelement location="${compiled.classes}"/>
                <path refid="classpath"/>
            </classpath>
        </javac>
    </target>

    <target name="build" depends="compile">
        <echo message="--- BUILD START ---"/>
        <jar destfile="${dest.jar}" basedir="${compiled.classes}" compress="false" index="true">
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
                <attribute name="Version" value="${main.version}"/>
            </manifest>
        </jar>
    </target>

    <target name="clean">
        <echo message="--- CLEAN START ---"/>
        <delete dir="${compiled}"/>
    </target>

    <target name="test" depends="build">
        <echo message="--- TEST START ---"/>
        <mkdir dir="${compiled.tests}"/>
        <javac destdir="${compiled.tests}" includeantruntime="false">
            <src path="${test.dir}"/>
            <classpath>
                <pathelement location="${compiled.classes}"/>
                <path refid="classpath"/>
            </classpath>
        </javac>
        <junit fork="true" printsummary="on" haltonfailure="true">
            <formatter type="xml"/>
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${compiled.classes}"/>
                <pathelement location="${compiled.tests}"/>
            </classpath>
            <batchtest todir="reports">
                <fileset dir="${test.dir}" includes="*Test*.java"/>
            </batchtest>
        </junit>
        <echo message="junit.totalcount: ${junit.totalcount}"/>
        <echo message="junit.success: ${junit.success}"/>
        <echo message="junit.failures: ${junit.failures}"/>
        <echo message="junit.skipped: ${junit.skipped}"/>
        <echo message="junit.haltonfailure: ${junit.haltonfailure}"/>
    </target>


    <target name="doc">
        <checksum todir="ant/checksums" format="MD5SUM" totalproperty="md5" forceOverwrite="yes">
            <fileset dir="${web.dir}"/>
            <fileset dir="${src.dir}"/>
        </checksum>
        <checksum todir="ant/checksums" algorithm="SHA-512" totalproperty="sha1" forceOverwrite="yes">
            <fileset dir="${web.dir}"/>
            <fileset dir="${src.dir}"/>
        </checksum>
        <propertyfile file="build.properties">
            <entry key="info.md5" value="${info.md5}"/>
            <entry key="info.sha1" value="${info.sha1}"/>
        </propertyfile>
        <manifest file="${resources.dir}/META-INF/MANIFEST.MF">
            <attribute name="SHA1-Digest" value="${info.sha1}"/>
            <attribute name="MD5-Digest" value="${info.md5}"/>
        </manifest>
        <delete dir="${doc.dir}"/>
        <mkdir dir="${doc.dir}"/>
        <javadoc destdir="${doc.dir}"
                 author="true"
                 version="true"
                 use="true">
            <classpath refid="classpath"/>
            <fileset dir="${src.dir}"/>
        </javadoc>
        <jar destfile="${doc.dir}/docs.jar"
             basedir="${doc.dir}"
             update="true">
        </jar>
    </target>

    <target name="xml">
        <echo message="Начинаем валидацию XML файлов..."/>
        <!-- Валидация всех XML файлов в директории проекта и всех поддиректориях, исключая папку .idea -->
        <xmlvalidate failonerror="true" lenient="true">
            <fileset dir="./" excludes=".idea/">
                <include name="**/*.xml"/>
                <exclude name=".idea/**"/>
            </fileset>
        </xmlvalidate>
        <echo message="Валидация XML файлов успешно завершена."/>
    </target>

    <target name="_scp">
        <echo message="* SCP STARTED *"/>
        <scp file="${ant.project}"
             todir="${scp.username}:${scp.password}@${scp.host}:${scp.dir}"
             port="${scp.port}"
             trust="true"/>
        <echo message="* SCP COMPLETED *"/>
    </target>

    <target name="scp" depends="build, test">
        <condition property="coverage_ok">
            <available file="${junit.outputfile}" />
            <and>
                <not>
                    <length length="${junit.totalfailures}" when="gt" value="0" />
                </not>
                <or>
                    <length length="${junit.haltonfailure}" when="eq" value="1" />
                    <math operation="+" operand1="${junit.success}" operand2="${junit.skipped}" />
                    <greaterthan value="50" />
                    <percent value="${junit.totalcount}" />
                </or>
            </and>
        </condition>
        <antcall target="_scp" if="${coverage_ok}"/>
    </target>

    <target name="diff">
        <echo message="***** DIFF START *****"/>
        <exec executable="git" outputproperty="changes">
            <arg line="diff --name-only"/>
        </exec>
        <for param="class" list="${diff.classes}" delimiter=" ">
            <sequential>
                <condition property="commit">
                    <contains string="${changes}" substring="@{class}"/>
                </condition>
                <if>
                    <isset property="commit"/>
                    <then>
                        <exec executable="git">
                            <arg value="add"/>
                            <arg value="@{class}"/>
                        </exec>
                    </then>
                </if>
            </sequential>
        </for>
        <exec executable="git">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="Update some file in diff.class"/>
        </exec>
        <echo message="***** DIFF END *****"/>
    </target>

    <target name="team">
        <echo message="***** TEAM START *****"/>
        <mkdir dir="${zip.dir}"/>
        <fileset dir="${build.dir}"/>

        <exec executable="git">
            <arg line="checkout HEAD~1"/>
        </exec>
        <!--    Собираем эту ревизию -->
        <antcall target="build"/>
        <!--    Копируем собранный проект во временную директорию -->
        <copy file="target/${ant.project.name}.jar"
              tofile="${zip.dir}/${ant.project.name}v1.jar"
              overwrite="false">
        </copy>

        <exec executable="git">
            <arg line="checkout HEAD~2"/>
        </exec>
        <!--    Собираем эту ревизию -->
        <antcall target="build"/>
        <!--    Копируем собранный проект во временную директорию -->
        <copy file="target/${ant.project.name}.jar"
              tofile="${zip.dir}/${ant.project.name}v2.jar"
              overwrite="false">
        </copy>

        <exec executable="git">
            <arg line="checkout HEAD~3"/>
        </exec>
        <!--    Собираем эту ревизию -->
        <antcall target="build"/>
        <!--    Копируем собранный проект во временную директорию -->
        <copy file="target/${ant.project.name}.jar"
              tofile="${zip.dir}/${ant.project.name}v3.jar"
              overwrite="false">
        </copy>

        <exec executable="git">
            <arg line="checkout HEAD~4"/>
        </exec>
        <!--    Собираем эту ревизию -->
        <antcall target="build"/>
        <!--    Копируем собранный проект во временную директорию -->
        <copy file="target/${ant.project.name}.jar"
              tofile="${zip.dir}/${ant.project.name}v4.jar"
              overwrite="false">
        </copy>

        <!--    Архивируем все -->
        <zip destfile="${build.dir}/team.zip"
             basedir="${zip.dir}"/>

        <exec executable="git">
            <arg line="checkout HEAD"/>
        </exec>
        <echo message="***** TEAM END *****"/>
    </target>

    <!-- Цель для установки переменных окружения из командной строки или из файла -->
    <target name="set-env">
        <echo message="Using JVM args: ${custom.jvm.args}"/>
        <echo message="Using Java version: ${compile.version}"/>
    </target>
    <target name="run" depends="compile">
        <echo message="--- RUN START ---"/>
        <java fork="true" classname="${main.class}" classpath="${compiled.classes}">
            <jvmarg value="-Xms1024M"/>
            <jvmarg value="-Xms512m"/>
        </java>
        <echo message="--- RUN END ---"/>
    </target>
    <target name="env">
        <antcall target="run"/>
    </target>
</project>
